We Broke our code into subsections to ensure that the various aspects of the robot were working separately before putting together the final code. Below the working sub codes can be found: 

**ARMS WORKING:


#include <Servo.h>

Servo myservo1;
Servo myservo2;// create servo object to control a servo
// twelve servo objects can be created on most boards

int pos = 0;    // variable to store the servo position
int pos1 = 0;

void setup() {
  myservo1.attach(9);
  myservo2.attach(10);// attaches the servo on pin 9 to the servo object
}

void loop() {
  for (pos = 70; pos <= 100; pos++) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo1.write(pos);
    pos1 = 260-pos;
    myservo2.write(pos1);// tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
  for (pos = 180; pos >= 70; pos--) { // goes from 180 degrees to 0 degrees
    myservo1.write(pos);
    pos1 = 260-pos;
    myservo2.write(pos1);// tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15ms for the servo to reach the position
  }
}


**SKIRT WORKING

// A basic everyday NeoPixel strip test program.

// NEOPIXEL BEST PRACTICES for most reliable operation:
// - Add 1000 uF CAPACITOR between NeoPixel strip's + and - connections.
// - MINIMIZE WIRING LENGTH between microcontroller board and first pixel.
// - NeoPixel strip's DATA-IN should pass through a 300-500 OHM RESISTOR.
// - AVOID connecting NeoPixels on a LIVE CIRCUIT. If you must, ALWAYS
//   connect GROUND (-) first, then +, then data.
// - When using a 3.3V microcontroller with a 5V-powered NeoPixel strip,
//   a LOGIC-LEVEL CONVERTER on the data line is STRONGLY RECOMMENDED.
// (Skipping these may work OK on your workbench but can fail in the field)

#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket
#endif

// Which pin on the Arduino is connected to the NeoPixels?
// On a Trinket or Gemma we suggest changing this to 1:
#define LED_PIN    6

// How many NeoPixels are attached to the Arduino?
#define LED_COUNT 150

// Declare our NeoPixel strip object:
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);
// Argument 1 = Number of pixels in NeoPixel strip
// Argument 2 = Arduino pin number (most are valid)
// Argument 3 = Pixel type flags, add together as needed:
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)


// setup() function -- runs once at startup --------------------------------

int turnSpeed = 100;

void setup() {
  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.
  // Any other board, you can remove this part (but no harm leaving it):
#if defined(__AVR_ATtiny85__) && (F_CPU == 16000000)
  clock_prescale_set(clock_div_1);
#endif
  // END of Trinket-specific code.

  Serial.begin(9600); // open the serial port at 9600 bps:
  strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)
  strip.show();            // Turn OFF all pixels ASAP
  strip.setBrightness(50); // Set BRIGHTNESS to about 1/5 (max = 255)
}


// loop() function -- runs repeatedly as long as board is on ---------------

void loop() {
  // Fill along the length of the strip in various colors...

  while (turnSpeed < 125) {
  colorWipe(strip.Color(170,   25,   255), 10); // purple
  turnSpeed+=5;
  Serial.println(turnSpeed);
  }

   while (turnSpeed < 150) {
  colorWipe(strip.Color(225,   25,   140), 10); // pink
  turnSpeed+=5;
  Serial.println(turnSpeed);
  }

   while (turnSpeed < 175) {
  colorWipe(strip.Color(170,   255,   0), 10); // green
  turnSpeed+=5;
  Serial.println(turnSpeed);
  }

   while (turnSpeed < 200) {
  colorWipe(strip.Color(0,   128,   255), 10); // blue
  turnSpeed+=5;
  Serial.println(turnSpeed);
  }

   while (turnSpeed < 225) {
  colorWipe(strip.Color(255,   128,   0), 10); // orange
  turnSpeed+=5;
  Serial.println(turnSpeed);
  }

   while (turnSpeed < 255) {
  colorWipe(strip.Color(255,   0,   0), 10); // Red
  turnSpeed+=5;
  Serial.println(turnSpeed);
  }

  
//  colorWipe(strip.Color(  0, 255,   0), 50); // Green
//  
//  colorWipe(strip.Color(  0,   0, 255), 50); // Blue

  // Do a theater marquee effect in various colors...
//  theaterChase(strip.Color(127, 127, 127), 50); // White, half brightness
//  theaterChase(strip.Color(127,   0,   0), 50); // Red, half brightness
//  theaterChase(strip.Color(  0,   0, 127), 50); // Blue, half brightness
//
//  rainbow(10);             // Flowing rainbow cycle along the whole strip
//  theaterChaseRainbow(50); // Rainbow-enhanced theaterChase variant
}


// Some functions of our own for creating animated effects -----------------

// Fill strip pixels one after another with a color. Strip is NOT cleared
// first; anything there will be covered pixel by pixel. Pass in color
// (as a single 'packed' 32-bit value, which you can get by calling
// strip.Color(red, green, blue) as shown in the loop() function above),
// and a delay time (in milliseconds) between pixels.
void colorWipe(uint32_t color, int wait) {
  for(int i=0; i<strip.numPixels(); i++) { // For each pixel in strip...
    strip.setPixelColor(i, color);         //  Set pixel's color (in RAM)
    strip.show();                          //  Update strip to match
    delay(wait);                           //  Pause for a moment
  }
}


**ARMS AND LEG

#include <Servo.h>

Servo myservo1;
Servo myservo2;// create servo object to control a servo
Servo myservo3;
// twelve servo objects can be created on most boards

int pos = 0;    // variable to store the servo position
int pos1 = 0;
const int pin11 =  11; 

void setup() {
  myservo1.attach(9);
  myservo2.attach(10);// attaches the servo on pin 9 to the servo object

  pinMode(pin11, OUTPUT);
  myservo3.attach(pin11);
}

void loop() {
  for (pos = 70; pos <= 100; pos++) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo1.write(pos);
    pos1 = 260-pos;
    myservo2.write(pos1);// tell servo to go to position in variable 'pos'
    myservo3.write(pos);
    delay(15);                       // waits 15ms for the servo to reach the position
  }
  for (pos = 180; pos >= 70; pos--) { // goes from 180 degrees to 0 degrees
    myservo1.write(pos);
    pos1 = 260-pos;
    myservo2.write(pos1);// tell servo to go to position in variable 'pos'
    myservo3.write(pos);
    delay(15);                       // waits 15ms for the servo to reach the position
  }

  
}



